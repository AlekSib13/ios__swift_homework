import UIKit




//1. Написать функцию, которая определяет, четное число или нет.
//
//Функция должна принимать значение, которое необходимо проверить на чётность и вернуть результат в виде да/нет (у нас для этого есть специальный тип данных)

print("Задание 1\n")

func is_even(number value:Int)->Bool {
    if value % 2 == 0 {
        return true
    }
    else {
        return false
    }
}

print(is_even(number: 29))

print("""
\n
-------------\n
Задание 2\n
""")

//2. Написать функцию, которая определяет, делится ли число без остатка на 3.
//
//Аналогичная функция, но условие проверки в ней будет отличаться.

func is_dev(number value:Int)->Bool {
    if value % 3 == 0 {
        return true
    }
    else {
        return false
    }
}

print(is_dev(number: 51))


print("""
\n
-------------\n
Задание 3\n
""")




//3. Создать возрастающий массив из 100 чисел.
//
//Любым удобным для вас способом задайте массив и сохраните в переменную или константу.

var list_ = [Int] ()
for element in [1...100] {
    list_.append(contentsOf: element)
}

print(list_)


print("""
\n
-------------\n
Задание 4\n
""")
//Как бы вы решили данную задачу? - Думаю, что у массивов есть методы, позволяющие решить задачу в 1 строчку


//4. Удалить из этого массива все четные числа и все числа, которые не делятся на 3.
//
//Подумайте, как это можно сделать, учитывая те конструкции, которые мы рассмотрели на уроке. Существует большое количество способов решить данное задание.


func deleter (_ array: inout [Int])->[Int] {
    for element in array {
        if element % 2 == 0 || element % 3 != 0  {
            let index: Int! = array.firstIndex(of: element)
            array.remove(at: index)
        }
    }
    return array
}

print(deleter(&list_))


print("""
\n
-------------\n
Задание 5\n
""")


//5. * Написать функцию, которая добавляет в массив новое число Фибоначчи, и добавить при помощи нее 50 элементов.
//
//Числа Фибоначчи определяются соотношениями Fn=Fn-1 + Fn-2, то есть каждое последующее число является суммой двух предыдущих. Последовательность начинается с двух единиц (1, 1), а остальные расчитываются по формуле.


func fibonachi ()->[Int] {
    var new_value:Int
    var index = 1
    var initial_array = [1,1]
    while initial_array.count < 51 {
        new_value = initial_array[index]+initial_array[index-1]
        initial_array.append(new_value)
        index+=1
    }
    return initial_array
}

print(fibonachi())



print("""
\n
-------------\n
Задание 6\n
""")

//6. * Заполнить массив из 100 элементов различными простыми числами. Натуральное число, большее единицы, называется простым, если оно делится только на себя и на единицу.
//
//Здесь однозначно стоит использовать цикл, но подумайте, какой из вариантов цикла здесь подойдёт больше всего (цикл с условием while или цикл for с заданным количеством повторений).
//Необходимо проверять все числа подряд на то, являются ли они простыми и если так, то собирать где-то в результирующем массиве. Когда ваша цель будет выполнена и вы получите 100 чисел в этом массиве, можно завершать рассчёты и выводить результат в консоль.
//Также для нахождения всех простых чисел не больше заданного числа n, можно воспользоваться методом Эратосфена. Для этого нужно выполнить следующие шаги:
//
//a. Выписать подряд все целые числа от двух до n (2, 3, 4, ..., n).
//b. Пусть переменная p изначально равна двум — первому простому числу.
//c. Зачеркнуть в списке числа от 2 + p до n, считая шагом p..
//d. Найти первое не зачёркнутое число в списке, большее, чем p, и присвоить значению переменной p это число.
//e. Повторять шаги c и d, пока возможно.
//Учтите, что здесь вы заранее задаёте количество рассматриваемых чисел, а не то колчество, которое получите в итоге (по заданию 100 простых чисел), поэтому нужно будет провести несколько экспериментов для определения подходящего n.


func prime_numbers (number value:Int)->([Int]) {
    var array_ = [Int]()

    for element in [2...value] {
        array_.append(contentsOf: element)
    } //получаем массив чисел от 2 до 100 включительно

    var iter = 0

    for element in array_ { //для каждого элемента массива
//        print(iter,array_)
        var num_in_array:Int
        var multiplier = 2 //берем первый множитель
        var index:Int!
//        print(max_)
        while true{
            var last_element:Int! = array_.last
            num_in_array = element * multiplier
//            print(element)
            if num_in_array <= last_element {
                if array_.contains(num_in_array)  {
                    index = array_.firstIndex(of:num_in_array)
                    array_.remove(at: index)
                }
                multiplier+=1
                continue
            }
            else {
                iter+=1
                break}
        }
    }

    print("Количество элементов массива: \(array_.count)")
    return array_
}

print(prime_numbers(number: 546))






